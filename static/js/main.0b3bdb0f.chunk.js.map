{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","email","name","className","src","alt","CardList","robots","map","robo","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","paddingTop","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0b3bdb0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id,email,name}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-pink dib ma2 br3 pa3 grow shadow-5 bw2\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"Robo\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map( (robo, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName = \"pa2 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype = \"search\" \r\n\t\t\t\tplaceholder = \"Search Robot Name\" \r\n\t\t\t\tonChange = { searchChange } \r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style = {{ overflowY: 'scroll', border:'3px solid orange', height: '470px', paddingTop:'7px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch( error, info) {\r\n\t\tthis.setState({ hasError : true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif( this.state.hasError ) {\r\n\t\t\treturn <h1> Server Error Occured! </h1>;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField, requestRobotsApi } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField : state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobotsApi())\r\n\t}\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter( robot => {\r\n  \t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()) \r\n  \t})\r\n\t\tif(isPending){\r\n\t\t\treturn <h1 className=\"tc \"> LOADING... </h1>\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1 className=\"f2\">Search Robots</h1>\r\n\t\t\t\t\t<SearchBox searchChange={ onSearchChange } />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={ filteredRobots }/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n} \r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = text => {\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t}\r\n}\r\n\r\nexport const requestRobotsApi = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField : ''\r\n}\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({},state,{searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\terror: '',\r\n\trobots: []\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; \r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger)); \r\n\r\nReactDOM.render(\r\n\t<Provider store={ store }>\r\n\t\t<App />\r\n\t</Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}